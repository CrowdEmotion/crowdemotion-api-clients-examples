<?php
/**
 * RespondentApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudEmotion API v1
 *
 * CrowdEmotion API
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * RespondentApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RespondentApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.crowdemotion.co.uk/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return RespondentApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation respondentGet
     *
     * Find all Respondents of a Research
     *
     * @param int $research_id Search by research id. (required)
     * @param int $skip The number of results to skip. (optional)
     * @param int $limit The maximum number of results to return. (optional)
     * @param string $where JSON formatted string. (optional)
     * @param string $sort Attribute used to sort results. (optional)
     * @return \Swagger\Client\Model\Respondent[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function respondentGet($research_id, $skip = null, $limit = null, $where = null, $sort = null)
    {
        list($response) = $this->respondentGetWithHttpInfo($research_id, $skip, $limit, $where, $sort);
        return $response;
    }

    /**
     * Operation respondentGetWithHttpInfo
     *
     * Find all Respondents of a Research
     *
     * @param int $research_id Search by research id. (required)
     * @param int $skip The number of results to skip. (optional)
     * @param int $limit The maximum number of results to return. (optional)
     * @param string $where JSON formatted string. (optional)
     * @param string $sort Attribute used to sort results. (optional)
     * @return Array of \Swagger\Client\Model\Respondent[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function respondentGetWithHttpInfo($research_id, $skip = null, $limit = null, $where = null, $sort = null)
    {
        // verify the required parameter 'research_id' is set
        if ($research_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $research_id when calling respondentGet');
        }
        // parse inputs
        $resourcePath = "/respondent";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($research_id !== null) {
            $queryParams['research_id'] = $this->apiClient->getSerializer()->toQueryValue($research_id);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = $this->apiClient->getSerializer()->toQueryValue($skip);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Respondent[]',
                '/respondent'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Respondent[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Respondent[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation respondentPost
     *
     * Create a Respondent
     *
     * @param \Swagger\Client\Model\Respondent $body Request body (required)
     * @return \Swagger\Client\Model\Respondent
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function respondentPost($body)
    {
        list($response) = $this->respondentPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation respondentPostWithHttpInfo
     *
     * Create a Respondent
     *
     * @param \Swagger\Client\Model\Respondent $body Request body (required)
     * @return Array of \Swagger\Client\Model\Respondent, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function respondentPostWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling respondentPost');
        }
        // parse inputs
        $resourcePath = "/respondent";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Respondent',
                '/respondent'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Respondent', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Respondent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation respondentRespondentIdDelete
     *
     * Delete a Respondent
     *
     * @param int $respondent_id  (required)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function respondentRespondentIdDelete($respondent_id)
    {
        list($response) = $this->respondentRespondentIdDeleteWithHttpInfo($respondent_id);
        return $response;
    }

    /**
     * Operation respondentRespondentIdDeleteWithHttpInfo
     *
     * Delete a Respondent
     *
     * @param int $respondent_id  (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function respondentRespondentIdDeleteWithHttpInfo($respondent_id)
    {
        // verify the required parameter 'respondent_id' is set
        if ($respondent_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $respondent_id when calling respondentRespondentIdDelete');
        }
        // parse inputs
        $resourcePath = "/respondent/{respondent_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($respondent_id !== null) {
            $resourcePath = str_replace(
                "{" . "respondent_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($respondent_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/respondent/{respondent_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation respondentRespondentIdGet
     *
     * Find a Respondent
     *
     * @param int $respondent_id Search by research id. (required)
     * @return \Swagger\Client\Model\Respondent
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function respondentRespondentIdGet($respondent_id)
    {
        list($response) = $this->respondentRespondentIdGetWithHttpInfo($respondent_id);
        return $response;
    }

    /**
     * Operation respondentRespondentIdGetWithHttpInfo
     *
     * Find a Respondent
     *
     * @param int $respondent_id Search by research id. (required)
     * @return Array of \Swagger\Client\Model\Respondent, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function respondentRespondentIdGetWithHttpInfo($respondent_id)
    {
        // verify the required parameter 'respondent_id' is set
        if ($respondent_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $respondent_id when calling respondentRespondentIdGet');
        }
        // parse inputs
        $resourcePath = "/respondent/{respondent_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($respondent_id !== null) {
            $resourcePath = str_replace(
                "{" . "respondent_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($respondent_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Respondent',
                '/respondent/{respondent_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Respondent', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Respondent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation respondentRespondentIdMetadataGet
     *
     * Find Respondent Metadata
     *
     * @param int $respondent_id ID of the Respondent (required)
     * @return \Swagger\Client\Model\RespondentMetadataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function respondentRespondentIdMetadataGet($respondent_id)
    {
        list($response) = $this->respondentRespondentIdMetadataGetWithHttpInfo($respondent_id);
        return $response;
    }

    /**
     * Operation respondentRespondentIdMetadataGetWithHttpInfo
     *
     * Find Respondent Metadata
     *
     * @param int $respondent_id ID of the Respondent (required)
     * @return Array of \Swagger\Client\Model\RespondentMetadataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function respondentRespondentIdMetadataGetWithHttpInfo($respondent_id)
    {
        // verify the required parameter 'respondent_id' is set
        if ($respondent_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $respondent_id when calling respondentRespondentIdMetadataGet');
        }
        // parse inputs
        $resourcePath = "/respondent/{respondent_id}/metadata";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($respondent_id !== null) {
            $resourcePath = str_replace(
                "{" . "respondent_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($respondent_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RespondentMetadataResponse',
                '/respondent/{respondent_id}/metadata'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RespondentMetadataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RespondentMetadataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation respondentRespondentIdMetadataPost
     *
     * Add Respondent Metadata
     *
     * @param int $respondent_id  (required)
     * @param \Swagger\Client\Model\RespondentMetadata $body Request body (required)
     * @return \Swagger\Client\Model\RespondentMetadataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function respondentRespondentIdMetadataPost($respondent_id, $body)
    {
        list($response) = $this->respondentRespondentIdMetadataPostWithHttpInfo($respondent_id, $body);
        return $response;
    }

    /**
     * Operation respondentRespondentIdMetadataPostWithHttpInfo
     *
     * Add Respondent Metadata
     *
     * @param int $respondent_id  (required)
     * @param \Swagger\Client\Model\RespondentMetadata $body Request body (required)
     * @return Array of \Swagger\Client\Model\RespondentMetadataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function respondentRespondentIdMetadataPostWithHttpInfo($respondent_id, $body)
    {
        // verify the required parameter 'respondent_id' is set
        if ($respondent_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $respondent_id when calling respondentRespondentIdMetadataPost');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling respondentRespondentIdMetadataPost');
        }
        // parse inputs
        $resourcePath = "/respondent/{respondent_id}/metadata";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($respondent_id !== null) {
            $resourcePath = str_replace(
                "{" . "respondent_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($respondent_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RespondentMetadataResponse',
                '/respondent/{respondent_id}/metadata'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RespondentMetadataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RespondentMetadataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation respondentRespondentIdPut
     *
     * Update a Respondent
     *
     * @param int $respondent_id  (required)
     * @param \Swagger\Client\Model\Respondent $body Request body (required)
     * @return \Swagger\Client\Model\Respondent
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function respondentRespondentIdPut($respondent_id, $body)
    {
        list($response) = $this->respondentRespondentIdPutWithHttpInfo($respondent_id, $body);
        return $response;
    }

    /**
     * Operation respondentRespondentIdPutWithHttpInfo
     *
     * Update a Respondent
     *
     * @param int $respondent_id  (required)
     * @param \Swagger\Client\Model\Respondent $body Request body (required)
     * @return Array of \Swagger\Client\Model\Respondent, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function respondentRespondentIdPutWithHttpInfo($respondent_id, $body)
    {
        // verify the required parameter 'respondent_id' is set
        if ($respondent_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $respondent_id when calling respondentRespondentIdPut');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling respondentRespondentIdPut');
        }
        // parse inputs
        $resourcePath = "/respondent/{respondent_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($respondent_id !== null) {
            $resourcePath = str_replace(
                "{" . "respondent_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($respondent_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Respondent',
                '/respondent/{respondent_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Respondent', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Respondent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
