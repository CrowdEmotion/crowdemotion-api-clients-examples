<?php
/**
 * FaceVideoApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudEmotion API v1
 *
 * CrowdEmotion API
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * FaceVideoApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FaceVideoApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.crowdemotion.co.uk/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return FaceVideoApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation facevideoFacevideoIdDelete
     *
     * Delete a FaceVideo
     *
     * @param int $facevideo_id ID of FaceVideo to be deleted. (required)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function facevideoFacevideoIdDelete($facevideo_id)
    {
        list($response) = $this->facevideoFacevideoIdDeleteWithHttpInfo($facevideo_id);
        return $response;
    }

    /**
     * Operation facevideoFacevideoIdDeleteWithHttpInfo
     *
     * Delete a FaceVideo
     *
     * @param int $facevideo_id ID of FaceVideo to be deleted. (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function facevideoFacevideoIdDeleteWithHttpInfo($facevideo_id)
    {
        // verify the required parameter 'facevideo_id' is set
        if ($facevideo_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $facevideo_id when calling facevideoFacevideoIdDelete');
        }
        // parse inputs
        $resourcePath = "/facevideo/{facevideo_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($facevideo_id !== null) {
            $resourcePath = str_replace(
                "{" . "facevideo_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($facevideo_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/facevideo/{facevideo_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation facevideoGet
     *
     * Find a FaceVideo
     *
     * @param int $facevideo_id FaceVideo ID. NOTE: Only this parameter is considered if both are specified. (optional)
     * @param int $response_id Response ID corresponding to the FaceVideo. (optional)
     * @return \Swagger\Client\Model\FaceVideo
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function facevideoGet($facevideo_id = null, $response_id = null)
    {
        list($response) = $this->facevideoGetWithHttpInfo($facevideo_id, $response_id);
        return $response;
    }

    /**
     * Operation facevideoGetWithHttpInfo
     *
     * Find a FaceVideo
     *
     * @param int $facevideo_id FaceVideo ID. NOTE: Only this parameter is considered if both are specified. (optional)
     * @param int $response_id Response ID corresponding to the FaceVideo. (optional)
     * @return Array of \Swagger\Client\Model\FaceVideo, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function facevideoGetWithHttpInfo($facevideo_id = null, $response_id = null)
    {
        // parse inputs
        $resourcePath = "/facevideo";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($facevideo_id !== null) {
            $queryParams['facevideo_id'] = $this->apiClient->getSerializer()->toQueryValue($facevideo_id);
        }
        // query params
        if ($response_id !== null) {
            $queryParams['response_id'] = $this->apiClient->getSerializer()->toQueryValue($response_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FaceVideo',
                '/facevideo'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FaceVideo', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FaceVideo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation facevideoPost
     *
     * Analyse FaceVideo
     *
     * @param \SplFileObject $filename FaceVideo to be analysed. (optional)
     * @param bool $sandbox Generates random data for testing, at no cost. Default: false. (optional)
     * @param int $response_id Associates this Facevideo to a previously generated Response. (optional)
     * @param int $research_id Associates this Facevideo to a previously generated Research. (optional)
     * @param int $media_id Associates this Facevideo to a previously generated Media. (optional)
     * @param int $respondent_id Associates this Facevideo to a previously generated Respondent. (optional)
     * @param bool $process_video Actually processes the video. Default: true. (optional)
     * @return \Swagger\Client\Model\FaceVideo
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function facevideoPost($filename = null, $sandbox = null, $response_id = null, $research_id = null, $media_id = null, $respondent_id = null, $process_video = null)
    {
        list($response) = $this->facevideoPostWithHttpInfo($filename, $sandbox, $response_id, $research_id, $media_id, $respondent_id, $process_video);
        return $response;
    }

    /**
     * Operation facevideoPostWithHttpInfo
     *
     * Analyse FaceVideo
     *
     * @param \SplFileObject $filename FaceVideo to be analysed. (optional)
     * @param bool $sandbox Generates random data for testing, at no cost. Default: false. (optional)
     * @param int $response_id Associates this Facevideo to a previously generated Response. (optional)
     * @param int $research_id Associates this Facevideo to a previously generated Research. (optional)
     * @param int $media_id Associates this Facevideo to a previously generated Media. (optional)
     * @param int $respondent_id Associates this Facevideo to a previously generated Respondent. (optional)
     * @param bool $process_video Actually processes the video. Default: true. (optional)
     * @return Array of \Swagger\Client\Model\FaceVideo, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function facevideoPostWithHttpInfo($filename = null, $sandbox = null, $response_id = null, $research_id = null, $media_id = null, $respondent_id = null, $process_video = null)
    {
        // parse inputs
        $resourcePath = "/facevideo";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('multipart/form-data'));

        // query params
        if ($sandbox !== null) {
            $queryParams['sandbox'] = $this->apiClient->getSerializer()->toQueryValue($sandbox);
        }
        // query params
        if ($response_id !== null) {
            $queryParams['response_id'] = $this->apiClient->getSerializer()->toQueryValue($response_id);
        }
        // query params
        if ($research_id !== null) {
            $queryParams['research_id'] = $this->apiClient->getSerializer()->toQueryValue($research_id);
        }
        // query params
        if ($media_id !== null) {
            $queryParams['media_id'] = $this->apiClient->getSerializer()->toQueryValue($media_id);
        }
        // query params
        if ($respondent_id !== null) {
            $queryParams['respondent_id'] = $this->apiClient->getSerializer()->toQueryValue($respondent_id);
        }
        // query params
        if ($process_video !== null) {
            $queryParams['processVideo'] = $this->apiClient->getSerializer()->toQueryValue($process_video);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($filename !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['filename'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($filename));
            } else {
                $formParams['filename'] = '@' . $this->apiClient->getSerializer()->toFormValue($filename);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FaceVideo',
                '/facevideo'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FaceVideo', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FaceVideo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation facevideoPut
     *
     * Analyse FaceVideo
     *
     * @param bool $sandbox Generates random data for testing, at no cost. Default: false. (optional)
     * @param int $response_id Associates this Facevideo to a previously generated Response. (optional)
     * @param int $research_id Associates this Facevideo to a previously generated Research. (optional)
     * @param int $media_id Associates this Facevideo to a previously generated Media. (optional)
     * @param int $respondent_id Associates this Facevideo to a previously generated Respondent. (optional)
     * @param bool $process_video Actually processes the video. Default: true. (optional)
     * @param \Swagger\Client\Model\FaceVideoUpload $body Request body (optional)
     * @return \Swagger\Client\Model\FaceVideo
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function facevideoPut($sandbox = null, $response_id = null, $research_id = null, $media_id = null, $respondent_id = null, $process_video = null, $body = null)
    {
        list($response) = $this->facevideoPutWithHttpInfo($sandbox, $response_id, $research_id, $media_id, $respondent_id, $process_video, $body);
        return $response;
    }

    /**
     * Operation facevideoPutWithHttpInfo
     *
     * Analyse FaceVideo
     *
     * @param bool $sandbox Generates random data for testing, at no cost. Default: false. (optional)
     * @param int $response_id Associates this Facevideo to a previously generated Response. (optional)
     * @param int $research_id Associates this Facevideo to a previously generated Research. (optional)
     * @param int $media_id Associates this Facevideo to a previously generated Media. (optional)
     * @param int $respondent_id Associates this Facevideo to a previously generated Respondent. (optional)
     * @param bool $process_video Actually processes the video. Default: true. (optional)
     * @param \Swagger\Client\Model\FaceVideoUpload $body Request body (optional)
     * @return Array of \Swagger\Client\Model\FaceVideo, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function facevideoPutWithHttpInfo($sandbox = null, $response_id = null, $research_id = null, $media_id = null, $respondent_id = null, $process_video = null, $body = null)
    {
        // parse inputs
        $resourcePath = "/facevideo";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($sandbox !== null) {
            $queryParams['sandbox'] = $this->apiClient->getSerializer()->toQueryValue($sandbox);
        }
        // query params
        if ($response_id !== null) {
            $queryParams['response_id'] = $this->apiClient->getSerializer()->toQueryValue($response_id);
        }
        // query params
        if ($research_id !== null) {
            $queryParams['research_id'] = $this->apiClient->getSerializer()->toQueryValue($research_id);
        }
        // query params
        if ($media_id !== null) {
            $queryParams['media_id'] = $this->apiClient->getSerializer()->toQueryValue($media_id);
        }
        // query params
        if ($respondent_id !== null) {
            $queryParams['respondent_id'] = $this->apiClient->getSerializer()->toQueryValue($respondent_id);
        }
        // query params
        if ($process_video !== null) {
            $queryParams['processVideo'] = $this->apiClient->getSerializer()->toQueryValue($process_video);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FaceVideo',
                '/facevideo'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FaceVideo', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FaceVideo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
