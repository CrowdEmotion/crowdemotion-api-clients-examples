<?php
/**
 * MediaCreation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudEmotion API v1
 *
 * CrowdEmotion API
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * MediaCreation Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MediaCreation implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'MediaCreation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'name' => 'string',
        'media_path' => 'string',
        'research_id' => 'int',
        'length' => 'int',
        'video_order' => 'int',
        'tags' => '\Swagger\Client\Model\Tags[]',
        'videodetails' => '\Swagger\Client\Model\Videodetails'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'name' => 'name',
        'media_path' => 'mediaPath',
        'research_id' => 'research_id',
        'length' => 'length',
        'video_order' => 'videoOrder',
        'tags' => 'tags',
        'videodetails' => 'videodetails'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'name' => 'setName',
        'media_path' => 'setMediaPath',
        'research_id' => 'setResearchId',
        'length' => 'setLength',
        'video_order' => 'setVideoOrder',
        'tags' => 'setTags',
        'videodetails' => 'setVideodetails'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'name' => 'getName',
        'media_path' => 'getMediaPath',
        'research_id' => 'getResearchId',
        'length' => 'getLength',
        'video_order' => 'getVideoOrder',
        'tags' => 'getTags',
        'videodetails' => 'getVideodetails'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['media_path'] = isset($data['media_path']) ? $data['media_path'] : null;
        $this->container['research_id'] = isset($data['research_id']) ? $data['research_id'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['video_order'] = isset($data['video_order']) ? $data['video_order'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['videodetails'] = isset($data['videodetails']) ? $data['videodetails'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['media_path'] === null) {
            $invalid_properties[] = "'media_path' can't be null";
        }
        if ($this->container['research_id'] === null) {
            $invalid_properties[] = "'research_id' can't be null";
        }
        if ($this->container['length'] === null) {
            $invalid_properties[] = "'length' can't be null";
        }
        if ($this->container['video_order'] === null) {
            $invalid_properties[] = "'video_order' can't be null";
        }
        if ($this->container['tags'] === null) {
            $invalid_properties[] = "'tags' can't be null";
        }
        if ($this->container['videodetails'] === null) {
            $invalid_properties[] = "'videodetails' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['media_path'] === null) {
            return false;
        }
        if ($this->container['research_id'] === null) {
            return false;
        }
        if ($this->container['length'] === null) {
            return false;
        }
        if ($this->container['video_order'] === null) {
            return false;
        }
        if ($this->container['tags'] === null) {
            return false;
        }
        if ($this->container['videodetails'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets media_path
     * @return string
     */
    public function getMediaPath()
    {
        return $this->container['media_path'];
    }

    /**
     * Sets media_path
     * @param string $media_path 
     * @return $this
     */
    public function setMediaPath($media_path)
    {
        $this->container['media_path'] = $media_path;

        return $this;
    }

    /**
     * Gets research_id
     * @return int
     */
    public function getResearchId()
    {
        return $this->container['research_id'];
    }

    /**
     * Sets research_id
     * @param int $research_id 
     * @return $this
     */
    public function setResearchId($research_id)
    {
        $this->container['research_id'] = $research_id;

        return $this;
    }

    /**
     * Gets length
     * @return int
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     * @param int $length 
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets video_order
     * @return int
     */
    public function getVideoOrder()
    {
        return $this->container['video_order'];
    }

    /**
     * Sets video_order
     * @param int $video_order 
     * @return $this
     */
    public function setVideoOrder($video_order)
    {
        $this->container['video_order'] = $video_order;

        return $this;
    }

    /**
     * Gets tags
     * @return \Swagger\Client\Model\Tags[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param \Swagger\Client\Model\Tags[] $tags
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets videodetails
     * @return \Swagger\Client\Model\Videodetails
     */
    public function getVideodetails()
    {
        return $this->container['videodetails'];
    }

    /**
     * Sets videodetails
     * @param \Swagger\Client\Model\Videodetails $videodetails
     * @return $this
     */
    public function setVideodetails($videodetails)
    {
        $this->container['videodetails'] = $videodetails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


