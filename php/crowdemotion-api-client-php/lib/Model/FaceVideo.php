<?php
/**
 * FaceVideo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudEmotion API v1
 *
 * CrowdEmotion API
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * FaceVideo Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FaceVideo implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'FaceVideo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'time_created' => '\DateTime',
        'filename' => 'string',
        'fq_avg' => 'int',
        'fq_stddev' => 'int',
        'frame_rate' => 'int',
        'num_frames' => 'int',
        'remote_location' => 'string',
        'status' => 'int',
        'status_text' => 'string',
        'status_message' => 'string',
        'response_id' => 'string',
        'md5' => 'string',
        'length_ms' => 'int',
        'length_s' => 'float',
        'frames_processed' => 'int',
        'processing_time' => 'int',
        'engine_version' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'time_created' => 'timeCreated',
        'filename' => 'filename',
        'fq_avg' => 'fqAvg',
        'fq_stddev' => 'fqStddev',
        'frame_rate' => 'frameRate',
        'num_frames' => 'numFrames',
        'remote_location' => 'remoteLocation',
        'status' => 'status',
        'status_text' => 'statusText',
        'status_message' => 'statusMessage',
        'response_id' => 'responseId',
        'md5' => 'md5',
        'length_ms' => 'lengthMS',
        'length_s' => 'lengthS',
        'frames_processed' => 'framesProcessed',
        'processing_time' => 'processingTime',
        'engine_version' => 'engineVersion'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'time_created' => 'setTimeCreated',
        'filename' => 'setFilename',
        'fq_avg' => 'setFqAvg',
        'fq_stddev' => 'setFqStddev',
        'frame_rate' => 'setFrameRate',
        'num_frames' => 'setNumFrames',
        'remote_location' => 'setRemoteLocation',
        'status' => 'setStatus',
        'status_text' => 'setStatusText',
        'status_message' => 'setStatusMessage',
        'response_id' => 'setResponseId',
        'md5' => 'setMd5',
        'length_ms' => 'setLengthMs',
        'length_s' => 'setLengthS',
        'frames_processed' => 'setFramesProcessed',
        'processing_time' => 'setProcessingTime',
        'engine_version' => 'setEngineVersion'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'time_created' => 'getTimeCreated',
        'filename' => 'getFilename',
        'fq_avg' => 'getFqAvg',
        'fq_stddev' => 'getFqStddev',
        'frame_rate' => 'getFrameRate',
        'num_frames' => 'getNumFrames',
        'remote_location' => 'getRemoteLocation',
        'status' => 'getStatus',
        'status_text' => 'getStatusText',
        'status_message' => 'getStatusMessage',
        'response_id' => 'getResponseId',
        'md5' => 'getMd5',
        'length_ms' => 'getLengthMs',
        'length_s' => 'getLengthS',
        'frames_processed' => 'getFramesProcessed',
        'processing_time' => 'getProcessingTime',
        'engine_version' => 'getEngineVersion'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['time_created'] = isset($data['time_created']) ? $data['time_created'] : null;
        $this->container['filename'] = isset($data['filename']) ? $data['filename'] : null;
        $this->container['fq_avg'] = isset($data['fq_avg']) ? $data['fq_avg'] : null;
        $this->container['fq_stddev'] = isset($data['fq_stddev']) ? $data['fq_stddev'] : null;
        $this->container['frame_rate'] = isset($data['frame_rate']) ? $data['frame_rate'] : null;
        $this->container['num_frames'] = isset($data['num_frames']) ? $data['num_frames'] : null;
        $this->container['remote_location'] = isset($data['remote_location']) ? $data['remote_location'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_text'] = isset($data['status_text']) ? $data['status_text'] : null;
        $this->container['status_message'] = isset($data['status_message']) ? $data['status_message'] : null;
        $this->container['response_id'] = isset($data['response_id']) ? $data['response_id'] : null;
        $this->container['md5'] = isset($data['md5']) ? $data['md5'] : null;
        $this->container['length_ms'] = isset($data['length_ms']) ? $data['length_ms'] : null;
        $this->container['length_s'] = isset($data['length_s']) ? $data['length_s'] : null;
        $this->container['frames_processed'] = isset($data['frames_processed']) ? $data['frames_processed'] : null;
        $this->container['processing_time'] = isset($data['processing_time']) ? $data['processing_time'] : null;
        $this->container['engine_version'] = isset($data['engine_version']) ? $data['engine_version'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['time_created'] === null) {
            $invalid_properties[] = "'time_created' can't be null";
        }
        if ($this->container['filename'] === null) {
            $invalid_properties[] = "'filename' can't be null";
        }
        if ($this->container['fq_avg'] === null) {
            $invalid_properties[] = "'fq_avg' can't be null";
        }
        if ($this->container['fq_stddev'] === null) {
            $invalid_properties[] = "'fq_stddev' can't be null";
        }
        if ($this->container['frame_rate'] === null) {
            $invalid_properties[] = "'frame_rate' can't be null";
        }
        if ($this->container['num_frames'] === null) {
            $invalid_properties[] = "'num_frames' can't be null";
        }
        if ($this->container['remote_location'] === null) {
            $invalid_properties[] = "'remote_location' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['status_text'] === null) {
            $invalid_properties[] = "'status_text' can't be null";
        }
        if ($this->container['status_message'] === null) {
            $invalid_properties[] = "'status_message' can't be null";
        }
        if ($this->container['response_id'] === null) {
            $invalid_properties[] = "'response_id' can't be null";
        }
        if ($this->container['md5'] === null) {
            $invalid_properties[] = "'md5' can't be null";
        }
        if ($this->container['length_ms'] === null) {
            $invalid_properties[] = "'length_ms' can't be null";
        }
        if ($this->container['length_s'] === null) {
            $invalid_properties[] = "'length_s' can't be null";
        }
        if ($this->container['frames_processed'] === null) {
            $invalid_properties[] = "'frames_processed' can't be null";
        }
        if ($this->container['processing_time'] === null) {
            $invalid_properties[] = "'processing_time' can't be null";
        }
        if ($this->container['engine_version'] === null) {
            $invalid_properties[] = "'engine_version' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['time_created'] === null) {
            return false;
        }
        if ($this->container['filename'] === null) {
            return false;
        }
        if ($this->container['fq_avg'] === null) {
            return false;
        }
        if ($this->container['fq_stddev'] === null) {
            return false;
        }
        if ($this->container['frame_rate'] === null) {
            return false;
        }
        if ($this->container['num_frames'] === null) {
            return false;
        }
        if ($this->container['remote_location'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['status_text'] === null) {
            return false;
        }
        if ($this->container['status_message'] === null) {
            return false;
        }
        if ($this->container['response_id'] === null) {
            return false;
        }
        if ($this->container['md5'] === null) {
            return false;
        }
        if ($this->container['length_ms'] === null) {
            return false;
        }
        if ($this->container['length_s'] === null) {
            return false;
        }
        if ($this->container['frames_processed'] === null) {
            return false;
        }
        if ($this->container['processing_time'] === null) {
            return false;
        }
        if ($this->container['engine_version'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets time_created
     * @return \DateTime
     */
    public function getTimeCreated()
    {
        return $this->container['time_created'];
    }

    /**
     * Sets time_created
     * @param \DateTime $time_created 
     * @return $this
     */
    public function setTimeCreated($time_created)
    {
        $this->container['time_created'] = $time_created;

        return $this;
    }

    /**
     * Gets filename
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     * @param string $filename 
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets fq_avg
     * @return int
     */
    public function getFqAvg()
    {
        return $this->container['fq_avg'];
    }

    /**
     * Sets fq_avg
     * @param int $fq_avg 
     * @return $this
     */
    public function setFqAvg($fq_avg)
    {
        $this->container['fq_avg'] = $fq_avg;

        return $this;
    }

    /**
     * Gets fq_stddev
     * @return int
     */
    public function getFqStddev()
    {
        return $this->container['fq_stddev'];
    }

    /**
     * Sets fq_stddev
     * @param int $fq_stddev 
     * @return $this
     */
    public function setFqStddev($fq_stddev)
    {
        $this->container['fq_stddev'] = $fq_stddev;

        return $this;
    }

    /**
     * Gets frame_rate
     * @return int
     */
    public function getFrameRate()
    {
        return $this->container['frame_rate'];
    }

    /**
     * Sets frame_rate
     * @param int $frame_rate 
     * @return $this
     */
    public function setFrameRate($frame_rate)
    {
        $this->container['frame_rate'] = $frame_rate;

        return $this;
    }

    /**
     * Gets num_frames
     * @return int
     */
    public function getNumFrames()
    {
        return $this->container['num_frames'];
    }

    /**
     * Sets num_frames
     * @param int $num_frames 
     * @return $this
     */
    public function setNumFrames($num_frames)
    {
        $this->container['num_frames'] = $num_frames;

        return $this;
    }

    /**
     * Gets remote_location
     * @return string
     */
    public function getRemoteLocation()
    {
        return $this->container['remote_location'];
    }

    /**
     * Sets remote_location
     * @param string $remote_location 
     * @return $this
     */
    public function setRemoteLocation($remote_location)
    {
        $this->container['remote_location'] = $remote_location;

        return $this;
    }

    /**
     * Gets status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param int $status 
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_text
     * @return string
     */
    public function getStatusText()
    {
        return $this->container['status_text'];
    }

    /**
     * Sets status_text
     * @param string $status_text 
     * @return $this
     */
    public function setStatusText($status_text)
    {
        $this->container['status_text'] = $status_text;

        return $this;
    }

    /**
     * Gets status_message
     * @return string
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }

    /**
     * Sets status_message
     * @param string $status_message 
     * @return $this
     */
    public function setStatusMessage($status_message)
    {
        $this->container['status_message'] = $status_message;

        return $this;
    }

    /**
     * Gets response_id
     * @return string
     */
    public function getResponseId()
    {
        return $this->container['response_id'];
    }

    /**
     * Sets response_id
     * @param string $response_id 
     * @return $this
     */
    public function setResponseId($response_id)
    {
        $this->container['response_id'] = $response_id;

        return $this;
    }

    /**
     * Gets md5
     * @return string
     */
    public function getMd5()
    {
        return $this->container['md5'];
    }

    /**
     * Sets md5
     * @param string $md5 
     * @return $this
     */
    public function setMd5($md5)
    {
        $this->container['md5'] = $md5;

        return $this;
    }

    /**
     * Gets length_ms
     * @return int
     */
    public function getLengthMs()
    {
        return $this->container['length_ms'];
    }

    /**
     * Sets length_ms
     * @param int $length_ms 
     * @return $this
     */
    public function setLengthMs($length_ms)
    {
        $this->container['length_ms'] = $length_ms;

        return $this;
    }

    /**
     * Gets length_s
     * @return float
     */
    public function getLengthS()
    {
        return $this->container['length_s'];
    }

    /**
     * Sets length_s
     * @param float $length_s 
     * @return $this
     */
    public function setLengthS($length_s)
    {
        $this->container['length_s'] = $length_s;

        return $this;
    }

    /**
     * Gets frames_processed
     * @return int
     */
    public function getFramesProcessed()
    {
        return $this->container['frames_processed'];
    }

    /**
     * Sets frames_processed
     * @param int $frames_processed 
     * @return $this
     */
    public function setFramesProcessed($frames_processed)
    {
        $this->container['frames_processed'] = $frames_processed;

        return $this;
    }

    /**
     * Gets processing_time
     * @return int
     */
    public function getProcessingTime()
    {
        return $this->container['processing_time'];
    }

    /**
     * Sets processing_time
     * @param int $processing_time 
     * @return $this
     */
    public function setProcessingTime($processing_time)
    {
        $this->container['processing_time'] = $processing_time;

        return $this;
    }

    /**
     * Gets engine_version
     * @return int
     */
    public function getEngineVersion()
    {
        return $this->container['engine_version'];
    }

    /**
     * Sets engine_version
     * @param int $engine_version 
     * @return $this
     */
    public function setEngineVersion($engine_version)
    {
        $this->container['engine_version'] = $engine_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


