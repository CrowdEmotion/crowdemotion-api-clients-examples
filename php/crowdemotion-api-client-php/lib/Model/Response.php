<?php
/**
 * Response
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CloudEmotion API v1
 *
 * CrowdEmotion API
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Response Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Response implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'time_created' => '\DateTime',
        'research_id' => 'int',
        'media_id' => 'int',
        'respondent_id' => 'int',
        'user_id' => 'int',
        'complete' => 'bool',
        'used' => 'bool',
        'company_id' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'time_created' => 'timeCreated',
        'research_id' => 'researchId',
        'media_id' => 'mediaId',
        'respondent_id' => 'respondentId',
        'user_id' => 'userId',
        'complete' => 'complete',
        'used' => 'used',
        'company_id' => 'company_id'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'time_created' => 'setTimeCreated',
        'research_id' => 'setResearchId',
        'media_id' => 'setMediaId',
        'respondent_id' => 'setRespondentId',
        'user_id' => 'setUserId',
        'complete' => 'setComplete',
        'used' => 'setUsed',
        'company_id' => 'setCompanyId'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'time_created' => 'getTimeCreated',
        'research_id' => 'getResearchId',
        'media_id' => 'getMediaId',
        'respondent_id' => 'getRespondentId',
        'user_id' => 'getUserId',
        'complete' => 'getComplete',
        'used' => 'getUsed',
        'company_id' => 'getCompanyId'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['time_created'] = isset($data['time_created']) ? $data['time_created'] : null;
        $this->container['research_id'] = isset($data['research_id']) ? $data['research_id'] : null;
        $this->container['media_id'] = isset($data['media_id']) ? $data['media_id'] : null;
        $this->container['respondent_id'] = isset($data['respondent_id']) ? $data['respondent_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['complete'] = isset($data['complete']) ? $data['complete'] : null;
        $this->container['used'] = isset($data['used']) ? $data['used'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['time_created'] === null) {
            $invalid_properties[] = "'time_created' can't be null";
        }
        if ($this->container['research_id'] === null) {
            $invalid_properties[] = "'research_id' can't be null";
        }
        if ($this->container['media_id'] === null) {
            $invalid_properties[] = "'media_id' can't be null";
        }
        if ($this->container['respondent_id'] === null) {
            $invalid_properties[] = "'respondent_id' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalid_properties[] = "'user_id' can't be null";
        }
        if ($this->container['complete'] === null) {
            $invalid_properties[] = "'complete' can't be null";
        }
        if ($this->container['used'] === null) {
            $invalid_properties[] = "'used' can't be null";
        }
        if ($this->container['company_id'] === null) {
            $invalid_properties[] = "'company_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['time_created'] === null) {
            return false;
        }
        if ($this->container['research_id'] === null) {
            return false;
        }
        if ($this->container['media_id'] === null) {
            return false;
        }
        if ($this->container['respondent_id'] === null) {
            return false;
        }
        if ($this->container['user_id'] === null) {
            return false;
        }
        if ($this->container['complete'] === null) {
            return false;
        }
        if ($this->container['used'] === null) {
            return false;
        }
        if ($this->container['company_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets time_created
     * @return \DateTime
     */
    public function getTimeCreated()
    {
        return $this->container['time_created'];
    }

    /**
     * Sets time_created
     * @param \DateTime $time_created 
     * @return $this
     */
    public function setTimeCreated($time_created)
    {
        $this->container['time_created'] = $time_created;

        return $this;
    }

    /**
     * Gets research_id
     * @return int
     */
    public function getResearchId()
    {
        return $this->container['research_id'];
    }

    /**
     * Sets research_id
     * @param int $research_id 
     * @return $this
     */
    public function setResearchId($research_id)
    {
        $this->container['research_id'] = $research_id;

        return $this;
    }

    /**
     * Gets media_id
     * @return int
     */
    public function getMediaId()
    {
        return $this->container['media_id'];
    }

    /**
     * Sets media_id
     * @param int $media_id 
     * @return $this
     */
    public function setMediaId($media_id)
    {
        $this->container['media_id'] = $media_id;

        return $this;
    }

    /**
     * Gets respondent_id
     * @return int
     */
    public function getRespondentId()
    {
        return $this->container['respondent_id'];
    }

    /**
     * Sets respondent_id
     * @param int $respondent_id 
     * @return $this
     */
    public function setRespondentId($respondent_id)
    {
        $this->container['respondent_id'] = $respondent_id;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id 
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets complete
     * @return bool
     */
    public function getComplete()
    {
        return $this->container['complete'];
    }

    /**
     * Sets complete
     * @param bool $complete 
     * @return $this
     */
    public function setComplete($complete)
    {
        $this->container['complete'] = $complete;

        return $this;
    }

    /**
     * Gets used
     * @return bool
     */
    public function getUsed()
    {
        return $this->container['used'];
    }

    /**
     * Sets used
     * @param bool $used 
     * @return $this
     */
    public function setUsed($used)
    {
        $this->container['used'] = $used;

        return $this;
    }

    /**
     * Gets company_id
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     * @param int $company_id 
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


